// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Counter');
gettext('Pending');
gettext('Syscounter');
gettext('02-Bits');
gettext('03-Bits');
gettext('04-Bits');
gettext('05-Bits');
gettext('08-Bits');
gettext('24-Bits');
gettext('32-Bits');
gettext('Counter-M-rst');
gettext('Counter-M-x02: 2-bits M module counter with reset');
gettext('Inc1-2bit: Increment a 2-bits number by one');
gettext('AdderK-2bit: Adder of 2-bit operand and 2-bit constant');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('Adder-2bits: Adder of two operands of 2 bits');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('Two bits input And gate');
gettext('OR2: Two bits input OR gate');
gettext('Constant bit 0');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('Comp2-2bit: Comparator of two 2-bit numbers');
gettext('Comp2-1bit: Comparator of two 1-bit numbers');
gettext('NOT gate (Verilog implementation)');
gettext('02-Reg-rst: 2 bits Register with reset. Verilog implementation');
gettext('2-bits Comparator');
gettext('Maximum count  \nreached');
gettext('2-bits register');
gettext('If the max count is reached  \nand the cnt tic is received,  \nthe register is reset to 0');
gettext('External reset');
gettext('A');
gettext('B');
gettext('Input');
gettext('Output');
gettext('Counter-M');
gettext('Counter-M-x02: 2-bits M module counter');
gettext('Counter-rst');
gettext('Counter-rst-x02: 2-bits counter with reset');
gettext('Counter');
gettext('Counter-x02: 2-bits counter');
gettext('02-Reg: 2 bits Register. Verilog implementation');
gettext('Counter-M-rst');
gettext('Counter-M-x03: 3-bits M module counter with reset');
gettext('Comp2-3bit: Comparator of two 3-bit numbers');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Three bits input And gate');
gettext('Inc1-3bit: Increment a 3-bits number by one');
gettext('AdderK-3bit: Adder of 3-bit operand and 3-bit constant');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('Adder-3bits: Adder of two operands of 3 bits');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('03-Reg-rst: 3 bits Register with reset. Verilog implementation');
gettext('Counter-M');
gettext('Counter-M-x03: 3-bits M module counter');
gettext('Counter-rst');
gettext('Counter-rst-x03: 3-bits counter with reset');
gettext('Counter');
gettext('Counter-x03: 3-bits counter');
gettext('03-Reg: 3 bits Register. Verilog implementation');
gettext('Counter');
gettext('Counter-x04: 4-bits counter');
gettext('Inc1-4bit: Increment a 4-bits number by one');
gettext('AdderK-4bit: Adder of 4-bit operand and 4-bit constant');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('04-Reg: 4 bits Register. Verilog implementation');
gettext('Counter');
gettext('Counter-x05: 5-bits counter');
gettext('Inc1-5bit: Increment a 5-bits number by one');
gettext('AdderK-5bit: Adder of 5-bit operand and 5-bit constant');
gettext('Adder-5bits: Adder of two operands of 5 bits');
gettext('Bus5-Split-1-4: Split the 5-bits bus into two buses of 1 and 4 bits');
gettext('Bus5-Join-1-4: Join the two buses of 1 and 4 bits into a 5-bits Bus');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('05-Reg: 5 bits Register. Verilog implementation');
gettext('Counter');
gettext('Counter-x08: 8-bits counter');
gettext('08-Reg: 8 bits Register. Verilog implementation');
gettext('Inc1-8bit: Increment a 8-bits number by one');
gettext('AdderK-8bit: Adder of 8-bit operand and 8-bit constant');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('Counter');
gettext('Contador básico, de 24 bits');
gettext('**Contador básico**');
gettext('**Valor inicial**');
gettext('**Incremento**');
gettext('Counter-M-rst');
gettext('Counter-M-x32: 32-bits M module counter with reset');
gettext('Inc1-32bit: Increment a 32-bits number by one');
gettext('AdderK-32bit: Adder of 32-bit operand and 32-bit constant');
gettext('Generic: 32-bits generic constant');
gettext('Adder-32bits: Adder of two operands of 32 bits');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Bus24-Join-8-16: Join the two buses into an 24-bits Bus');
gettext('Bus32-Split-8-24: Split the 28-bits bus into two buses of 8 and 24 wires');
gettext('Bus24-Split-16-8: Split the 24-bits bus into two buses of 16 and 8 wires');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Bus32-Join-8-24: Join the two buses into an 32-bits Bus');
gettext('Geu-32-Bits_v: 32-bit Unsigned Greather than or equal comparator. Verilog implementation');
gettext('32-Reg-rst: 32 bits Register with reset. Verilog implementation');
gettext('32-bits register');
gettext('Counter-Max-rst');
gettext('Counter-Max-x32: 32-bits  counter with reset and max value');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('13-bits');
gettext('14-bits');
gettext('15-bits');
gettext('16-bits');
gettext('17-bits');
gettext('32-bits');
gettext('count-up-dn-lim-rst');
gettext('2bits up-down counter with limits. Reset');
gettext('Comparador menor que, de un operando de 2 bits');
gettext('Puerta AND');
gettext('2bits-Greather than comparator');
gettext('Codificador de 2 a 1. La salida zero se activa cuando ninguna entrada está activada');
gettext('Puerta NOT');
gettext('Sumador de un operando de 2 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('System - D Flip-flop. Capture data every system clock cycle. Verilog implementation');
gettext('2-to-1 Multplexer (2-bit channels). Verilog implementation');
gettext('Maximum value');
gettext('Minimum value');
gettext('**Increment tic**  \nup button press and  \ncurrent value < Max');
gettext('**Decrement tic**  \nDown button pressed and  \ncurrent value > Min');
gettext('inc tic: 1  \ndec tic: 0\n');
gettext('Action detected!  \nEither inc or dec');
gettext('The counter  \nhas changed!');
gettext('Current value');
gettext('Value incremented!');
gettext('Value decremented!');
gettext('## Up-down counter with MAX and MIN limits\n\nThe counter is incremented when the up tic is received  \nand it has not already reached its maximum value  \n\nThe counter is decremented then the down tic is received  \nand it is not in its minimum value');
gettext('Parameter: Initial value');
gettext('System clock');
gettext('Input data');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Not connected');
gettext('count-up-dn-lim');
gettext('2bits up-down counter with limits');
gettext('A standard 2-to-1 encoder with nz (not-zero) output');
gettext('## Truth table\n\n| i1 | i0 | out | nz |\n|----|----|-----|----|\n| 0  | 0  |  0  | 0  |\n| 0  | 1  |  0  | 1  |\n| 1  | 0  |  1  | 1  |\n| 1  | 1  |  1  | 1  |');
gettext('count-up-dn-lim_v');
gettext('Contador ascendente/descendente de 2 bits');
gettext('count-up-dn');
gettext('Contador Up & Down 2 bits sin limitación de comienzo y fin.');
gettext('blocks');
gettext('cont-up-down-rst');
gettext('3-bits up-down counter, with reset');
gettext('Comparador de un operando de 4 bits. Se compara si el operando es igual al parámetro');
gettext('Sumador  de 4 bits (sin acarreo)');
gettext('Valor genérico constante, de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Separador de bus de 4-bits en buses de 1 bits y 3 bits');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input. Block implementation');
gettext('04-Reg-rst: 4 bits Register with reset. Verilog implementation');
gettext('2-to-1 Multplexer (4-bit channels). Verilog implementation');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('cont-up-down');
gettext('Contador ascendente/descendente de 3 bits');
gettext('cont-up-down');
gettext('Puerta OR');
gettext('Sumador de un operando de 3 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Comparador de igualdad, de un operando de 3 bits');
gettext('2-to-1 Multplexer (3-bit channels). Verilog implementation');
gettext('blocks');
gettext('cont-up-down-2');
gettext('Contador ascendente/descendente de 4 bits. Dir=1 cuenta ascendente. Dir=0 descendente');
gettext('cont-up-down');
gettext('Contador ascendente/descendente de 4 bits');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 4 bits, con reset ');
gettext('**Parámetro**: Módulo del contador');
gettext('up-down-counter');
gettext('4bits Up/Down counter (block implementation)');
gettext('Sumador de un operando de 4 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 5 bits, con reset ');
gettext('count-up-down-limits');
gettext('cont-up-system-ena');
gettext('Contador del sistema, ascendente, de 6 bits, con enable ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 6 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 7 bits, con reset ');
gettext('blocks');
gettext('system');
gettext('cont-up-down-limit');
gettext('Contador ascendente/descendente con límites');
gettext('Sumador de un operando de 8 bits con una constante pasada como parámetro (No hay accarreo)');
gettext('Circuito combinacional de 3 entradas y 1 salidas');
gettext('Agregador de 3 cables en un bus de 3-bits');
gettext('Comparador de un operando de 8 bits. Se compara si el operando es igual al parámetro');
gettext('2-to-1 Multplexer (8-bit channels). Verilog implementation');
gettext('| Top | Bot | dir | enable | Descripción |\n|-----|-----|-----|--------|------|\n|  0  |  0  |  x  |  1     | Limites no alcanzados |\n|  0  |  1  |  0  |  0     | Limite inferior. No dec |\n|  0  |  1  |  1  |  1     | Limite inferior, pero inc |\n|  1  |  0  |  0  |  1     | Limite sup, pero dec |\n|  1  |  0  |  1  |  0     | Limite sup. No inc   |\n|  1  |  1  |  x  |  0     | Imposible |');
gettext('Registro  \nprincipal');
gettext('Incremento');
gettext('Decremento');
gettext('Siguiente valor');
gettext('Según la dirección,  \nel se toma como sigueinte  \nvalor el incrementado o  \ndecrementado');
gettext('top = 1 cuando se  \nha llegado al límite  \nsuperior');
gettext('¿Contador = Max?');
gettext('¿Contador = Min?');
gettext('bott = 1 cuando se  \nha llegado al límite  \ninferior');
gettext('Circuito combinacional para habilitar o no  \nla cuenta. Si estamos en el límite inferior y  \nla dirección es descendente --> NO decrementar  \n\nSi estamos en el límite superior y la dirección es  \nascendente --> NO incrementar');
gettext('**Dirección**:  \n0 : Descendente  \n1 : Ascencente');
gettext('**Tic de cuenta**');
gettext('Dejar pasar el tic de  \ncuenta, o no');
gettext('Registro inicializado  \ncon el valor mínimo');
gettext('cont-up-down');
gettext('Contador ascendente o descendente');
gettext('Sumador de un dos operandos de 8 bits (sin acarreo)');
gettext('Valor genérico constante, de 8 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 8 bits, con reset ');
gettext('counter-down-limit');
gettext('Contador descendente con limite inferior. Cuando dir=1 se inicializa al valor máximo');
gettext('tic');
gettext('Si contador es 0 y  \nla direccion es  \ndecremento, bloquear tic');
gettext('Si llega un tic  \nllevar el contador  \nal máximo');
gettext('cont-basic');
gettext('Contador básico, de 8 bits');
gettext('cont-basic');
gettext('Contador del sistema, de 8 bits');
gettext('cont-max');
gettext('Contador del sistema, de 9 bits, con salida de valor máximo alcanzado');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 9 bits, con reset ');
gettext('system');
gettext('cont-up-rst');
gettext('Contador módulo M, ascendente, de 10 bits, con reset ');
gettext('cont-up-system');
gettext('Contador del sistema, módulo M, ascendente, de 10 bits, con reset ');
gettext('cont-up');
gettext('cont-max');
gettext('Contador del sistema, de 10 bits, con salida de valor máximo alcanzado');
gettext('cont-up');
gettext('Contador del sistema, módulo M, ascendente, de 10 bits');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 11 bits, con reset ');
gettext('cont-up-down');
gettext('Sumador de dos operandos de 12 bits (sin acarreo)');
gettext('Valor genérico constante, de 12 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('12-Reg: 12 bits Register. Verilog implementation');
gettext('2-to-1 Multplexer (12-bit channels). Verilog implementation');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 12 bits, con reset ');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 13 bits, con reset ');
gettext('cont-up-down');
gettext('Sumador de dos operandos de 14 bits');
gettext('Valor genérico constante, de 14 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('2-to-1 Multplexer (14-bit channels). Verilog implementation');
gettext('14-Reg: 14 bits Register. Verilog implementation');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 14 bits, con reset ');
gettext('cont-up-down');
gettext('Sumador de dos operandos de 15 bits');
gettext('Valor genérico constante, de 15 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('2-to-1 Multplexer (15-bit channels). Verilog implementation');
gettext('15-Reg: 15 bits Register. Verilog implementation');
gettext('cont-up');
gettext('Contador módulo M, ascendente, de 16 bits, con reset ');
gettext('system');
gettext('cont-basic');
gettext('Contador del sistema, de 17 bits');
gettext('count-up-rst');
gettext('32-bits M module up counter, with reset ');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('12-bits');
gettext('16-bits');
gettext('17-bits');
gettext('20-bits');
gettext('24-bits');
gettext('28-bits');
gettext('32-bits');
gettext('syscounter-M-rst-x02');
gettext('syscounter-M-rst-2-bits: 2-bits Module M Syscounter with reset');
gettext('02-Sys-reg-rst: 2 bits system register with reset. Verilog implementation');
gettext('syscounter-M-x02');
gettext('syscounter-M-2-bits: 2-bits Module M Syscounter');
gettext('syscounter-Mk-rst-x02');
gettext('syscounter-Mk-rst-2-bits: 2-bits Module M Syscounter with reset');
gettext('Generic: 2-bits k-1 constant (Input values: 1,2,3,4). It returns the value input by the user minus 1. Outputs: 0,1,2,3');
gettext('Output: 0,1,2,3');
gettext('Inputs: 1,2,3,4');
gettext('syscounter-Mk-x02');
gettext('Input parameter: Module');
gettext('syscounter-rst-x02');
gettext('2-bits Syscounter with reset');
gettext('syscounter-x02');
gettext('2-bits Syscounter');
gettext('02-Sys-reg: 2 bits system register. Verilog implementation');
gettext('syscounter-M-rst-x03');
gettext('syscounter-M-rst-3-bits: 3-bits Module M Syscounter with reset');
gettext('03-Sys-reg-rst: 3 bits system register with reset. Verilog implementation');
gettext('syscounter-M-x03');
gettext('syscounter-M-3-bits: 3-bits Module M Syscounter');
gettext('syscounter-rst-x03');
gettext('3-bits Syscounter with reset');
gettext('syscounter-x03');
gettext('3-bits Syscounter');
gettext('03-Sys-reg: 3 bits system register. Verilog implementation');
gettext('syscounter-rst-x04');
gettext('4-bits Syscounter with reset');
gettext('04-Sys-reg-rst: 4 bits system register with reset. Verilog implementation');
gettext('syscounter-x04');
gettext('4-bits Syscounter');
gettext('04-Sys-reg: 4 bits system register. Verilog implementation');
gettext('syscounter-rst-x05');
gettext('5-bits Syscounter with reset');
gettext('05-Sys-reg-rst: 5 bits system register with reset. Verilog implementation');
gettext('syscounter-x05');
gettext('5-bits Syscounter');
gettext('05-Sys-reg: 5 bits system register. Verilog implementation');
gettext('syscounter-rst-x06');
gettext('6-bits Syscounter with reset');
gettext('Inc1-6bit: Increment a 6-bits number by one');
gettext('AdderK-6bit: Adder of 6-bit operand and 6-bit constant');
gettext('Adder-6bits: Adder of two operands of 6 bits');
gettext('Bus6-Split-2-4: Split the 6-bits bus into two buses of 2 and 4 wires');
gettext('Bus6-Join-1-5: Join the two buses into a 6-bits Bus');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('06-Sys-reg-rst: 6 bits system register with reset. Verilog implementation');
gettext('syscounter-rst-x07');
gettext('7-bits Syscounter with reset');
gettext('Inc1-7bit: Increment a 7-bits number by one');
gettext('AdderK-7bit: Adder of 7-bit operand and 7-bit constant');
gettext('Adder-7bits: Adder of two operands of 7 bits');
gettext('Bus7-Split-3-4: Split the 7-bits bus into two buses of 3 and 4 wires');
gettext('Bus7-Join-1-4: Join the two buses into a 7-bits Bus');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('07-Sys-reg-rst: 7 bits system register with reset. Verilog implementation');
gettext('syscounter-rst-x08');
gettext('8-bits Syscounter with reset');
gettext('08-Sys-reg-rst: 8 bits system register with reset. Verilog implementation');
gettext('syscounter-rst-x12');
gettext('12-bits Syscounter with reset');
gettext('Inc1-12bit: Increment a 12-bits number by one');
gettext('AdderK-12bit: Adder of 12-bit operand and 12-bit constant');
gettext('Adder-12bits: Adder of two operands of 12 bits');
gettext('Bus12-Split-4-8: Split the 12-bits bus into two buses of 4 and 8 wires');
gettext('Bus12-Join-4-8: Join the two buses into an 12-bits Bus');
gettext('Generic: 12-bits generic constant (0-4095)');
gettext('12-Sys-reg-rst: 12 bits system register with reset. Verilog implementation');
gettext('syscounter-M-x16');
gettext('syscounter-M-16-bits: 16-bits Module M Syscounter');
gettext('Comp2-16bit: Comparator of two 16-bit numbers');
gettext('Comp2-8bit: Comparator of two 8-bit numbers');
gettext('Comp2-4bit: Comparator of two 4-bit numbers');
gettext('16-bits Syscounter with reset');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Generic: 16-bits generic constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('16-Sys-reg-rst: 16 bits system register with reset. Verilog implementation');
gettext('syscounter-rst-x16');
gettext('syscounter-x16');
gettext('17-bits Syscounter');
gettext('syscounter-M-x20');
gettext('syscounter-M-20-bits: 2-bits Module M Syscounter');
gettext('Comp2-20bit: Comparator of two 20-bit numbers');
gettext('Bus20-Split-4-8-8: Split the 20-bits bus into three buses of 4, 8 and 8 wires');
gettext('20-bits Syscounter with reset');
gettext('Inc1-20bit: Increment a 20-bits number by one');
gettext('Adder-20bits: Adder of two operands of 20 bits');
gettext('Bus20-Split-8-12: Split the 20-bits bus into two buses of 8 and 12 wires');
gettext('Bus20-Join-half: Join the two buses into an 20-bits Bus');
gettext('Generic: 20-bits generic constant');
gettext('20-Sys-reg-rst: 20 bits system register with reset. Verilog implementation');
gettext('syscounter-rst-x20');
gettext('syscounter-M-x24');
gettext('syscounter-M-24-bits: 24-bits Module M Syscounter');
gettext('Comp2-24bit: Comparator of two 24-bit numbers');
gettext('Bus24-Split-one-third: Split the 24-bits bus into three buses of  the same size');
gettext('24-bits Syscounter with reset');
gettext('Inc1-24bit: Increment a 24-bits number by one');
gettext('AdderK-24bit: Adder of 24-bit operand and 24-bit constant');
gettext('Generic: 24-bits generic constant');
gettext('Adder-24bits: Adder of two operands of 24 bits');
gettext('24-Sys-reg-rst: 24 bits system register with reset. Verilog implementation');
gettext('syscounter-rst-x24');
gettext('syscounter-rst-x28');
gettext('28-bits Syscounter with reset');
gettext('Inc1-28bit: Increment a 28-bits number by one');
gettext('Generic: 28-bits generic constant');
gettext('Adder-28bits: Adder of two operands of 28 bits');
gettext('Bus28-Split-20-8: Split the 28-bits bus into two buses of 20 and 8 wires');
gettext('Bus28-Join-4-24: Join the two buses into an 28-bits Bus');
gettext('28-Sys-reg-rst: 28 bits system register with reset. Verilog implementation');
gettext('syscounter-rst-x32');
gettext('32-bits Syscounter with reset');
gettext('32-Sys-reg-rst: 32 bits system register with reset. Verilog implementation');
gettext('syscounter-x32');
gettext('Sys-Counter-M-x32: 32-bits M module system counter');
gettext('If the max count is reached  \nthe register is reset to 0');
gettext('TESTs');
gettext('00-index');
gettext('DFF-rst-x02: Two D flip-flops in paralell with reset');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('D Flip-flop (verilog implementation)');
gettext('Counter-x01: 1-bit counter');
gettext('Reg: 1-Bit register');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('Reg-x03: 3-bits register');
gettext('Reg-x04: 4-bits register');
gettext('DFF-04: Three D flip-flops in paralell');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x03: Three D flip-flops in paralell with reset');
gettext('DFF-rst-x05: Five D flip-flops in paralell with reset');
gettext('DFF-rst-x06: Six D flip-flops in paralell with reset');
gettext('Bus6-Join-2-4: Join all the two buses into a 6-bits Bus');
gettext('DFF-rst-x07: Seven D flip-flops in paralell with reset');
gettext('Bus7-Join-3-4: Join the two buses into a 7-bits Bus');
gettext('DFF-rst-x08: Eight D flip-flops in paralell with reset');
gettext('DFF-rst-x12: 12 D flip-flops in paralell with reset');
gettext('Bus12-Split-one-third: Split the 12-bits bus into three buses of equal size');
gettext('Bus12-Join-one-third: Join the three buses into an 12-bits Bus');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('DFF-rst-x24: 24 D flip-flops in paralell with reset');
gettext('Bus24-Join-one-third: Join the three buses into an 24-bits Bus');
gettext('DFF-rst-x28: 28 D flip-flops in paralell with reset');
gettext('Bus28-Split-4-24: Split the 28-bits bus into two buses of 4 and 24 wires');
gettext('DFF-rst-x32: 32 D flip-flops in paralell with reset');
gettext('Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires');
gettext('Bus32-Join-quarter: Join the four buses into an 32-bits Bus');
gettext('reg-rst-2-bits:  2-bits register with reset');
gettext('1-bit-Reg-rst: 1-Bit register with reset');
gettext('Reg-x03-rst: 3-bits register with reset');
gettext('DFF-rst-x20: 20 D flip-flops in paralell with reset');
gettext('Bus20-Split-4-16: Split the 20-bits bus into two buses of 4 and 16 wires');
gettext('Generic component with clk input');
gettext('DFF-02: Two D flip-flops in paralell');
gettext('DFF-05: five D flip-flops in paralell');
gettext('# INDEX: IceCounter Collection');
gettext('## Syscounter');
gettext('## Syscounter-rst');
gettext('## Counter');
gettext('## 2-Bits');
gettext('## 3-Bits');
gettext('## 4-Bits');
gettext('## 5-Bits');
gettext('## 6-Bits');
gettext('## 7-Bits');
gettext('## 8-Bits');
gettext('## 12-Bits');
gettext('## 16-Bits');
gettext('## 24-Bits');
gettext('## 28-Bits');
gettext('## 32-Bits');
gettext('## Syscounter-M');
gettext('## Syscounter-M-rst');
gettext('## 1-Bits');
gettext('## Counter-rst');
gettext('## Counter-M');
gettext('## Counter-M-rst');
gettext('## Syscounter-Mk');
gettext('## Syscounter-Mk-rst');
gettext('## 20-Bits');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Data input');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Initial default  \nvalue: 0');
gettext('counters');
gettext('syscounters');
gettext('01-Bit');
gettext('02-Bits');
gettext('03-Bits');
gettext('04-Bits');
gettext('05-Bits');
gettext('32-Bits');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Puerta XOR');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('Un bit constante a 1');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('## Example 1: Manual testing with one button and one LED\n\nWhen the button is pressed, the LED state is changed');
gettext('1-Bit counter');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Previous input  \nvalue');
gettext('Current input  \nvalue');
gettext('There is a change  \non the input');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Initial value');
gettext('counter');
gettext('counter-M');
gettext('counter-M-rst');
gettext('counter-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('1-bit generic constant (0/1)');
gettext('## Example 1: Manual testing with buttons and one LED\n\nWhen the button is pressed, the counter is incrementd. Its output is  \nshown on the LEDs. The counter goes from 0 to 2 and then to 0 again \nWhen the SW2 is pressed the counter is reset (it starts from 0)');
gettext('3-Bits counter');
gettext('Edge detector');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('## Example 1: Manual testing with one button and one LED\n\nWhen the button is pressed, the counter is incremented. Its output is  \nshown on the LEDs. The counter goes from 0 to 5 and then to 0 again');
gettext('01-manual-testing');
gettext('## Example 1: Manual testing with buttons and one LED\n\nWhen the button is pressed, the counter is incrementd. Its output is  \nshown on the LEDs. when the SW2 button is pressed, the counter is reset');
gettext('2-Bits counter');
gettext('01-manual-testing');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input. Block implementation');
gettext('DFF. D Flip-flop. Verilog implementation');
gettext('Sync-x01: 1-bit input with the system clock domain (Verilog implementation)');
gettext('## Example 1: Manual testing with one button and one LED\n\nWhen the button is pressed, the counter is incrementd. Its output is  \nshown on the LEDs');
gettext('01-manual-testing');
gettext('counter');
gettext('counter-M');
gettext('counter-M-rst');
gettext('counter-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Example 1: Manual testing with buttons and one LED\n\nWhen the button is pressed, the counter is incrementd. Its output is  \nshown on the LEDs. The counter goes from 0 to 5 and then to 0 again \nWhen the SW2 is pressed the counter is reset (it starts from 0)');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('4-Bits counter');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('## Example 1: Manual testing with one button and LEDs\n\nWhen the button is pressed, the counter is incremented. Its output is  \nshown on the LEDs');
gettext('5-Bits counter');
gettext('01-manual-testing');
gettext('counter-M-rst');
gettext('counter-Max-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('Display32-8: Display a 32-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('4-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (4-bit channels)');
gettext('## 32bits Counter-M-rst: Manual testing with buttons and one LED\n\n');
gettext('Byte 0  \n(least significant)  ');
gettext('Channel B');
gettext('Channel A');
gettext('01-manual-testing');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Direct connection of a button. The button should not have any external circuit');
gettext('Reg-rst-32: 32 bits Register with load and reset inputs');
gettext('Sys-reg-rst-32: 32 bits system register with reset');
gettext('2-to-1 Multplexer (32-bit channels)');
gettext('Sys-reg-32: 32 bits system register');
gettext('Comp2-32bit: Comparator of two 32-bit numbers');
gettext('01-manual-testing');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('12-bits');
gettext('16-bits');
gettext('20-bits');
gettext('24-bits');
gettext('28-bits');
gettext('32-bits');
gettext('syscounter');
gettext('syscounter-M');
gettext('syscounter-M-rst');
gettext('syscounter-Mk');
gettext('syscounter-Mk-rst');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Ledoscope. Capture the input signal during the first 8 cycles after circuit initialization');
gettext('DFF-03: Three D flip-flops in paralell');
gettext('SReg-right-x8: 8 bits Shift register (to the right)');
gettext('SReg-right-x4: 4 bits Shift register (to the right)');
gettext('RS-FF-set. RS Flip-flop with priority set');
gettext('Constant bit 1');
gettext('# syscounter-M-rst-x2: Manual testing\n\nMeasuring the counter with the LEDoscope. The initial 8 cycles are shown on the LEDs  \nConnect the label **ch** to measure a signal. By default the less significant bit is  \ncaptured and the pattern 01001001 is shown on the LEDs. But after 5 cycles the counter  \nis reset so the patter is: `01001000`');
gettext('Cycle 0');
gettext('Cycle 1');
gettext('Cycle 2');
gettext('Cycle 3');
gettext('Cycle 4');
gettext('Cycle 5');
gettext('Cycle 6');
gettext('Cycle 7');
gettext('## LEDoscope\n\nDisplaying the channel on the LEDs');
gettext('2-bits System counter');
gettext('Channel to measure');
gettext('Max value');
gettext('Reset signal: the 5 initial cycles  \nit is 0. Then it goes to 1 for  \nreseting the counter. Pattern: 00000111');
gettext('Cycles > 5');
gettext('8-bits Shift register');
gettext('The input channel is captured  \non the register. One bit per  \nsystem clock');
gettext('RS FlipFlop initialized to 1');
gettext('while 1, the shift register  \nis capturing');
gettext('3-bits counter');
gettext('After 8 cycles the Flip-Flop is  \nreset and it stops capturing  \nbits');
gettext('Priority for the set');
gettext('01-manual-testing');
gettext('# syscounter-M-x2: Manual testing\n\nMeasuring the counter with the LEDoscope. The initial 8 cycles are shown on the LEDs  \nConnect the label **ch** to measure a signal. By default the less significant bit is  \ncaptured and the pattern 01001001 is shown on the LEDs');
gettext('As the 2-bits system counter is counting  \nall the time, the done signal is only  \ngenerated when the counter reaches the maximum  \nvalue and the Ledoscope is on (busy)');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Syscounter-Mk-rst-x2: Manual testing\n\nMeasuring the counter with the LEDoscope. The initial 8 cycles are shown on the LEDs  \nConnect the label **ch** to measure a signal. By default the less significant bit is  \ncaptured and the pattern 01001001 should be shown on the LEDs. But after 5 cycles the  \nreset signal is activated, so the final pattern is `01001000`');
gettext('01-manual-testing');
gettext('# syscounter-Mk-x2: Manual testing\n\nMeasuring the counter with the LEDoscope. The initial 8 cycles are shown on the LEDs  \nConnect the label **ch** to measure a signal. By default the less significant bit is  \ncaptured and the pattern 01001001 is shown on the LEDs');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# syscounter-rst-x2: Manual testing\n\nThe 8 first cycles are displayed on the LEDs. The less significant bit of the counter  \nis measured. The patter should be 01010101. But, after 4 cycles, the reset signal is  \nactivated, so the final patter is: 01010000');
gettext('Reset signal: the 4 initial cycles  \nit is 0. Then it goes to 1 for  \nreseting the counter. Patter: 00001111');
gettext('Cycles > 4');
gettext('01-manual-testing');
gettext('# syscounter-x2: Manual testing\n\nMeasuring the counter with the LEDoscope. The initial 8 cycles are shown on the LEDs  \nConnect the label **ch** to measure a signal. By default the less significant bit is  \ncaptured and the pattern 01010101 is shown on the LEDs');
gettext('01-manual-testing');
gettext('Syscounter');
gettext('Syscounter-M');
gettext('Syscounter-M-rst');
gettext('Syscounter-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# Syscounter-M-rst-x3: Manual testing\n\nMeasuring the counter with the LEDoscope. The initial 8 cycles are shown on the LEDs  \nConnect the label **ch** to measure a signal. By default the less significant bit is  \ncaptured and the pattern 01001001 is shown on the LEDs. But after 5 cycles the counter  \nis reset so the patter is: `01001000`');
gettext('3-bits System counter');
gettext('01-manual-testing');
gettext('# Syscounter-M-x3: Manual testing\n\nMeasuring the counter with the LEDoscope. The initial 8 cycles are shown on the LEDs  \nConnect the label **ch** to measure a signal. By default the less significant bit is  \ncaptured and the pattern `01010010` is shown on the LEDs');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# syscounter-rst-x3: Manual testing');
gettext('01-manual-testing');
gettext('01-manual-testing');
gettext('# Syscounter-rst-x3: Manual testing\n\nThe 8 first cycles are displayed on the LEDs. The less significant bit of the counter  \nis measured. The patter should be 01010101. But, after 4 cycles, the reset signal is  \nactivated, so the final patter is: 01010000');
gettext('01-manual-testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('16B memory icerok probe');
gettext('16B memory. Bus interface');
gettext('16 Bytes Synchronous memory');
gettext('Join the fields into one 16B memory bus');
gettext('Split a 16B memory bus into its fields');
gettext('Valor constante 0 para bus de 4 bits');
gettext('D Flip-flop');
gettext('16B memory sample machine. Captura the input data and store it in the memory');
gettext('8-bits register (in verilog)');
gettext('Multiplexor de 2 a 1 de 14 bits');
gettext('Máquina de contar, de 4 bits');
gettext('Biestable de almacenamiento del estado de la máquina');
gettext('Biestable con entradas de Set y Reset síncronas, para poner y quitar notaficaciones de eventos');
gettext('Detector de flancos de subida y bajada. Emite tic por las salidas correspondientes al detecta los flancos');
gettext('Registro de 4 bits con entrada de reset');
gettext('Comparador de dos operandos de 4 bits');
gettext('Valor genérico constante (menos 1), de 4 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('16B memory download machine');
gettext('Un bit constante a 0');
gettext('Valor constante 0 para bus de 8 bits');
gettext('Multiplexor de 2 a 1 de 8 bits');
gettext('Transmit one character to the STDOUT bus');
gettext('Extract the next signal from the stdout bus');
gettext('10 bits, 2-1 Multiplexor');
gettext('stdout bus joiner (data + tic)');
gettext('Serial transmiter for the stdout bus (1 char buffer). Sysclk parameter');
gettext('stdout bus splitter into data and tic signals');
gettext('Convert the 1-bit next signal into a 10-bit stdout bus');
gettext('Serial transmitter with a buffer for 1 byte');
gettext('1-byte buffer');
gettext('Registro de 8 bits');
gettext('Detector de flanco de subida. Emite un tic cuando detecta un flanco ascendente');
gettext('Serial transmitter with system clock freq parameter');
gettext('4bits constant value: 0');
gettext('# syscounter-rst-x4: Manual testing');
gettext('## Icerok-probe machine\n\nMachine for capturing data, storing it in the memory and transmit  \nto the computer by serial port');
gettext('Writing the data to the memory on  \nevery system clock cycle');
gettext('Transmiting the raw memory contents  \nto the computer, by serial port');
gettext('When the sampling is done  \ntransmit the information to  \nthe computer');
gettext('Memory were the data  \nis stored');
gettext('Reading data from memory  \nReading bus status');
gettext('Calculate if the bus can be taken');
gettext('The bus is available');
gettext('This circuits wants  \nto use the bus');
gettext('The bus has been already  \ntaken');
gettext('One cycle after the machine is done  \nthe bus is already taken to write  \nthe bbusy signal to 0 and allow  \nother circuits to use it');
gettext('The output bus is controlled  \nby this circuit (1) or  \nremain untouched (0)');
gettext('The reading machine  \ncan be started');
gettext('## Sample machine\n\nRead the input data, (one byte per clock cycle) and store it into the memory\n\n');
gettext('**Reloj del sistema**');
gettext('**Estado de**  \n**la máquina**');
gettext('Máquina encendida');
gettext('Máquina apagada  \n(rst = 1)');
gettext('Tic de arranque');
gettext('Tic de fin');
gettext('**Contador de ciclos**');
gettext('Número de ciclos  \ncontados');
gettext('Valor  \nincrementado');
gettext('### Salidas');
gettext('Estado de la máquina');
gettext('Ciclo actual');
gettext('Cuenta finalizada');
gettext('Ejecutar el ciclo');
gettext('Número de ciclos  \na contar');
gettext('¿Estamos en el  \nciclo k-1?');
gettext('Solo se hace caso a la  \nentrada next si la  \nmáquina está encendida');
gettext('Nuevo ciclo');
gettext('Si es el ciclo k-1 y  \nse pide un ciclo  \nnuevo: Terminar');
gettext('Apagar la  \nmáquina');
gettext('Ciclo nuevo:  \nincrementar la cuenta');
gettext('El tic de start se saca  \npor exec para que se ejecute  \nel primer ciclo');
gettext('Si la máquina está  \napagada, las señales  \nde ejecución no pueden  \nsalir!');
gettext('Retrasar la señal un ciclo  \nmientras que se detecta si  \nla máquina ha finalizado o no');
gettext('**Tic de apagado**');
gettext('**Tic de encendido**');
gettext('**Inicializar**');
gettext('**Estado de la máquina**');
gettext('## Detector doble: flancos de subida y bajada\n\nSe detectan tanto los flancos de subida como de bajada y se emite los  \ntics por sus salidas correspondientes');
gettext('Señal de  \nentrada');
gettext('Reloj del  \nsistema');
gettext('Reading machine');
gettext('## Download machine\n\nTransmit all the memory contents through the serial port  \nThe bytes are transmited raw (in binary). No ascii encoding  \nThere should be a program running on the computer capable of  \nreading these raw bytes');
gettext('## PUTC: Transmit one character (STDOUT bus)\n\nWhen **idle**, the STDOUT bus crosses the component without modification    \n\nWhen the machine starts, the char is outputed and the state is changed to busy  \nWhen the transmitter is done (tic received in next)  the machine is turned off');
gettext('Start tic: The byte from the  \ninput char is transmited');
gettext('Char to be transmited');
gettext('State of the machine:  \n1: ON: transmitting  \n2: OFF: transparent mode  ');
gettext('If the machine is on  \nand the character has been  \ntransmitted: Turn it off');
gettext('The machine has finished');
gettext('**STDOUT BUS**');
gettext('**Create the bus**  \nfrom the data and tic signals');
gettext('Transparent mode...  \nor not');
gettext('## STDOUT serial\n\nSerial transmitter for the STDOUT bus\n');
gettext('**STDOUT Bus**  \n* Data to transmit (8 bits)  \n* tic (1 bit)\n* data sent (done tic, 1 bit)');
gettext('Empty Buffer  \n(There is no byte  \nwaiting)');
gettext('Byte stored in the  \nbuffer, waiting to be  \ntransmitted when the  \ntransmitter is ready');
gettext('Buffer state:  \n0: empty  \n1: full');
gettext('Transmitter ready');
gettext('If the transmittter is ready  \nand there is a character  \nin the buffer: Transmit!');
gettext('Serial transmitter state');
gettext('syscounters');
gettext('syscounters-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus8-Join-3-5: Join the two buses into an 8-bits Bus');
gettext('3bits constant value: 0');
gettext('# syscounter-rst-x5: Manual testing');
gettext('01-manual-testing');
gettext('Bus5-Split-all: Split the 5-bits bus into its wires');
gettext('RS-FF-set-verilog. RS Flip-flop with priority set. Implementation in verilog');
gettext('SR-08-verilog: 8-bits Shift register to the right.  Verilog implementation');
gettext('# syscounter-x5: Manual testing\n\n');
gettext('5-bits System counter');
gettext('01-manual-testing');
gettext('syscounters');
gettext('syscounters-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus8-Join-2-6: Join the two buses into an 8-bits Bus');
gettext('2bits constant value: 0');
gettext('Bus6-Split-1-5: Split the 6-bits bus into two buses of 1 and 5 wires');
gettext('# syscounter-rst-x6: Manual testing');
gettext('01-manual-testing');
gettext('6-bits Syscounter');
gettext('Bus6-Split-5-1: Split the 6-bits bus into two buses of 5 and 1 wires');
gettext('# syscounter-x6: Manual testing\n\n');
gettext('syscounters-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus7-Split-1-6: Split the 7-bits bus into two buses of 1 and 6 wires');
gettext('Bus7-Join-1-7: Join the two buses into an 8-bits Bus');
gettext('# syscounter-rst-x7: Manual testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of 1 and 7 wires');
gettext('# syscounter-rst-x8: Manual testing');
gettext('01-manual-testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# syscounter-rst-x12: Manual testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# syscounter-rst-x16: Manual testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# syscounter-rst-x20: Manual testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus24-Split-8-16: Split the 24-bits bus into two buses of 8 and 16 wires');
gettext('# syscounter-rst-x24: Manual testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus28-Split-4-8-8-8: Split the 28-bits bus into four buses of 4, 8, 8, and 8 wires');
gettext('# syscounter-rst-x28: Manual testing');
gettext('syscounter-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# syscounter-rst-x32: Manual testing');
